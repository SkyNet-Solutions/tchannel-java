package com.uber.tchannel.tracing;

import com.google.common.base.Function;
import com.google.common.base.Predicate;
import com.google.common.collect.Iterators;
import com.google.common.collect.Maps;
import io.opentracing.propagation.TextMap;

import java.util.Iterator;
import java.util.Map;

import static com.uber.tchannel.tracing.PrefixedKeys.prefixedKey;
import static com.uber.tchannel.tracing.PrefixedKeys.unprefixedKey;

class PrefixedHeadersCarrier implements TextMap {
    /**
     * Prefix used with all keys generated by the tracer when marshalling SpanContext
     * to a map of headers.
     *
     * This string value is shared across all implementations of TChannel.
     */
    private final static String TRACING_KEY_PREFIX = "$tracing$";


    private final String prefix;
    private final Map<String, String> headers;

    PrefixedHeadersCarrier(Map<String, String> headers) {
        this(TRACING_KEY_PREFIX, headers);
    }

    PrefixedHeadersCarrier(String prefix, Map<String, String> headers) {
        this.prefix = prefix;
        this.headers = headers;
    }

    @Override
    public Iterator<Map.Entry<String, String>> iterator() {
        return Iterators.transform(Iterators.filter(headers.entrySet().iterator(),
                new Predicate<Map.Entry<String, String>>() {
                    @Override
                    public boolean apply(Map.Entry<String, String> entry) {
                        return entry.getKey().startsWith(prefix);
                    }
                }),
                new Function<Map.Entry<String, String>, Map.Entry<String, String>>() {
                    @Override
                    public Map.Entry<String, String> apply(Map.Entry<String, String> entry) {
                        return Maps.immutableEntry(
                                unprefixedKey(entry.getKey(), prefix),
                                entry.getValue());
                    }
                });
    }

    @Override
    public void put(String key, String value) {
        headers.put(prefixedKey(key, prefix), value);
    }

    public Map<String, String> getNonTracingHeaders() {
        return Maps.filterKeys(headers, new Predicate<String>() {
            @Override
            public boolean apply(String key) {
                return !key.startsWith(prefix);
            }
        });
    }
}
